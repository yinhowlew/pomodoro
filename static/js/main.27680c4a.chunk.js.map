{"version":3,"sources":["components/Button/Button.js","components/Timer/Timer.js","components/BreakInterval/BreakInterval.js","components/SessionLength/SessionLength.js","App.js","serviceWorker.js","index.js"],"names":["Button","play","stop","reset","isPlay","className","disabled","onClick","Timer","intervalID","setInterval","decreaseTimer","props","onPlayStopTimer","setState","state","timerSecond","timerMinute","isSession","onToggleInterval","onUpdateTimerMinute","prevState","clearInterval","onResetTimer","this","Component","BreakInterval","breakInterval","onIncreaseBreakInterval","onDecreaseBreakInterval","SessionLength","sessionLength","onIncreaseSessionLength","onDecreaseSessionLength","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27680c4a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Button = ({ play, stop, reset, isPlay }) => {\n    return (\n        <div className=\"Button\">\n          <button \n          \tdisabled={isPlay === true ? \"disabled\" : \"\"} \n          \tonClick={play}\n          \tclassName=\"Button\"\n          >\n            Play\n          </button>\n          <button \n          \tonClick={stop}\n          \tclassName=\"Button\"\n          >\n            Stop\n          </button>          \n          <button \n          \tonClick={reset}\n          \tclassName=\"Button\"\n          >\n            Reset\n          </button>             \n        </div>\n    )\n}\n\nexport default Button;","import React, { Component } from 'react';\nimport Button from \"../Button/Button\";\nimport './Timer.css';\n\nclass Timer extends Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tisSession: true,\n\t\t\ttimerSecond: 0,\n\t\t\tintervalID: 0,\n\t\t}\n\n\t\t// this.play = this.play.bind(this);\n\t\t// this.decreaseTimer = this.decreaseTimer.bind(this);\n\t\t// this.stop = this.stop.bind(this);\n\t\t// this.reset = this.reset.bind(this);\n\t}\n\n\tplay = () => {\n\t\tlet intervalID = setInterval(this.decreaseTimer, 1000);\n\t\tthis.props.onPlayStopTimer(true);\n\t\tthis.setState({\n\t\t\tintervalID: intervalID\n\t\t})\n\t}\n\n\tdecreaseTimer = () => {\n\t\tswitch (this.state.timerSecond) {\n\t\t\tcase 0:\n\t\t\t\tif (this.props.timerMinute === 0) {\n\t\t\t\t\tif (this.state.isSession) {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tisSession: false\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.props.onToggleInterval(this.state.isSession);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tisSession: true\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.props.onToggleInterval(this.state.isSession);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.props.onUpdateTimerMinute()\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\ttimerSecond: 59\n\t\t\t\t\t})\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.setState((prevState) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttimerSecond: prevState.timerSecond - 1\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tstop = () => {\n\t\tclearInterval(this.state.intervalID);\n\t\tthis.props.onPlayStopTimer(false);\n\t}\n\n\treset = () => {\n\t\tthis.stop();\n\t\tthis.props.onResetTimer();\n\t\tthis.props.onPlayStopTimer(false);\n\t\tthis.setState({\n\t\t\ttimerSecond: 0,\n\t\t\tisSession: true\n\t\t})\n\t}\n\n\n\trender() {\n\t\treturn (\n\t\t  <div>\n\t\t    <div className=\"Timer\">\n\t\t      <div>\n\t\t        {this.state.isSession === true ?\n\t\t        \t\"Session\" :\n\t\t        \t\"Break\"\n\t\t        }\n\t\t      </div>\n\t\t      <div>\n\t\t        <span>{this.props.timerMinute}</span>\n\t\t        <span>:</span>\n\t\t        <span>\n\t\t        {this.state.timerSecond === 0 \n\t\t        \t? \"00\" \n\t\t        \t: this.state.timerSecond < 10 \n\t\t        \t? \"0\" + this.state.timerSecond\n\t\t        \t: this.state.timerSecond\n\t\t    \t}\n\t\t        </span>\n\t\t      </div>          \n\t\t    </div>\n\n\t\t    <Button \n\t\t    \tplay={this.play}\n\t\t    \tstop={this.stop}\n\t\t    \treset={this.reset}\n\t\t    \tisPlay={this.props.isPlay}\n\t\t    />\n\t\t  </div>  \n\t\t)\t\n\t}\n}\n\nexport default Timer;\n","import React from 'react';\n\nconst BreakInterval = ({ breakInterval, onIncreaseBreakInterval, onDecreaseBreakInterval, isPlay }) => {\n\n// below is so that we can add validation; else we can just pass onDecreaseBreakInterval directly to onClick event of button\n\tconst decreaseCounter = () => {\n\t\tif (breakInterval === 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tonDecreaseBreakInterval();\n\t}\n\n\tconst increaseCounter = () => {\n\t\tif (breakInterval === 60) {\n\t\t\treturn;\n\t\t}\n\n\t\tonIncreaseBreakInterval();\n\t}\t\n\n    return (\n      <div className=\"Break-interval\">\n        <button \n        \tdisabled={isPlay === true ? \"disabled\" : \"\"} \n        \tonClick={increaseCounter}\n        >Up</button>\n        <section>{breakInterval}</section>\n        <button \n        \tdisabled={isPlay === true ? \"disabled\" : \"\"} \n        \tonClick={decreaseCounter}\n        >down</button>      \n      </div>\n    )\n}\n\nexport default BreakInterval;","import React from 'react';\n\nconst SessionLength = ({ sessionLength, onIncreaseSessionLength, onDecreaseSessionLength, isPlay }) => {\n\t\n// below is so that we can add validation; else we can just pass onDecreaseBreakInterval directly to onClick event of button\n\tfunction increaseSession() {\n\t\tif (sessionLength === 60) {\n\t\t\treturn;\n\t\t}\n\t\tonIncreaseSessionLength();\n\t}\n\n\tfunction decreaseSession() {\n\t\tif (sessionLength === 1) {\n\t\t\treturn;\n\t\t}\n\t\tonDecreaseSessionLength();\n\t}\n\n    return (\n      <div className=\"Break-interval\">\n        <button \n        \tdisabled={isPlay === true ? \"disabled\" : \"\"} \n        \tonClick={increaseSession}\n        >Up</button>\n        <section>{sessionLength}</section>\n        <button \n        \tdisabled={isPlay === true ? \"disabled\" : \"\"} \n        \tonClick={decreaseSession}\n        >down</button>          \n      </div>\n    )\n}\n\nexport default SessionLength;","import React, { Component } from 'react';\nimport './App.css';\nimport Timer from \"./components/Timer/Timer\";\nimport BreakInterval from \"./components/BreakInterval/BreakInterval\";\nimport SessionLength from \"./components/SessionLength/SessionLength\";\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      sessionLength: 25,\n      breakInterval: 5,\n      timerMinute: 25,\n      isPlay: false,\n    };\n  }\n    \n  onIncreaseBreakInterval = () => {\n    this.setState((prevState) => {\n      return {\n        breakInterval: prevState.breakInterval + 1\n      }\n    })\n  }\n\n  onDecreaseBreakInterval = () => {\n    this.setState((prevState) => {\n      return {\n        breakInterval: prevState.breakInterval - 1\n      }\n    })\n  }\n\n  onIncreaseSessionLength = () => {\n    this.setState((prevState) => {\n      return {\n        sessionLength: prevState.sessionLength + 1,\n        timerMinute: prevState.sessionLength + 1\n      }\n    })\n  }\n\n  onDecreaseSessionLength = () => {\n    this.setState((prevState) => {\n      return {\n        sessionLength: prevState.sessionLength - 1,\n        timerMinute: prevState.sessionLength - 1\n      }\n    })\n  }\n\n  onUpdateTimerMinute = () => {\n      this.setState((prevState) => {\n      return {\n        timerMinute: prevState.timerMinute - 1\n      }\n    })  \n  }\n\n  onToggleInterval = (isSession) => {\n    if (isSession) {\n      this.setState({\n        timerMinute: this.state.sessionLength\n     })\n    } else {\n      this.setState({\n        timerMinute: this.state.breakInterval\n      })\n    }\n  }\n\n  onResetTimer = () => {\n    this.setState({\n      timerMinute: this.state.sessionLength\n    })\n  }\n\n// this is to stop buttons up down clickable during session\n  onPlayStopTimer = (isPlay) => {\n    this.setState({\n      isPlay: isPlay\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Pomodoro Clock\n        </header>\n\n        <div className=\"Configure\">\n          <div className=\"Break-length\">\n            <section>\n              Break Length\n            </section>\n            <BreakInterval \n              isPlay={this.state.isPlay}\n              breakInterval={this.state.breakInterval}\n              onIncreaseBreakInterval={this.onIncreaseBreakInterval}\n              onDecreaseBreakInterval={this.onDecreaseBreakInterval}\n            />\n          </div>\n          <div className=\"Break-length\">\n            <section>\n              Session Length\n            </section>\n            <SessionLength \n              isPlay={this.state.isPlay}\n              sessionLength={this.state.sessionLength}\n              onIncreaseSessionLength={this.onIncreaseSessionLength}\n              onDecreaseSessionLength={this.onDecreaseSessionLength}\n            />         \n          </div>\n        </div>\n\n        <Timer \n          isPlay={this.state.isPlay}\n          timerMinute={this.state.timerMinute}\n          breakInterval={this.state.breakInterval}\n          onUpdateTimerMinute={this.onUpdateTimerMinute}\n          onToggleInterval={this.onToggleInterval}\n          onResetTimer={this.onResetTimer}\n          onPlayStopTimer={this.onPlayStopTimer}\n        />\n\n      </div>\n    );\n  }  \n}\n\nexport default App;\n\n\n\n// obsolete code:\n\n  // finalTimeUpdate = () => {\n  //   this.setState({finalTime: new Date().getTime() + this.state.sessionLength});\n  // }\n\n  // updateTimer = (minutes, seconds, countdownUpdate) => {\n  //   this.setState({min: minutes});\n  //   this.setState({sec: seconds});  \n  //   this.state.run ?\n  //   this.setState({timerID: countdownUpdate}) :\n  //   this.setState({timerID: 0}) \n  // }\n\n  // triggerTimer = () => {\n  //   this.state.run ?\n  //   this.setState({run: false}) :\n  //   this.setState({run: true})\n  //   console.log(this.state.run);\n  // }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}